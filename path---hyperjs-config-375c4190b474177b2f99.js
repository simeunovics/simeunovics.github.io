webpackJsonp([0xd4db6344fce5],{337:function(n,s){n.exports={data:{markdownRemark:{html:'<div class="gatsby-highlight" data-language="bash">\n      <pre class="language-bash"><code class="language-bash">// Future versions of Hyper may add additional config options,\n// <span class="token function">which</span> will not automatically be merged into this file.\n// See https://hyper.is<span class="token comment">#cfg for all currently supported options.</span>\n\nmodule.exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  config: <span class="token punctuation">{</span>\n    // choose either <span class="token variable"><span class="token variable">`</span><span class="token string">\'stable\'</span><span class="token variable">`</span></span> <span class="token keyword">for</span> receiving highly polished,\n    // or <span class="token variable"><span class="token variable">`</span><span class="token string">\'canary\'</span><span class="token variable">`</span></span> <span class="token keyword">for</span> <span class="token function">less</span> polished but <span class="token function">more</span> frequent updates\n    updateChannel: <span class="token string">\'stable\'</span>,\n\n    // default font size <span class="token keyword">in</span> pixels <span class="token keyword">for</span> all tabs\n    fontSize: 16,\n\n    // font family with optional fallbacks\n    // fontFamily: <span class="token string">\'Menlo, "DejaVu Sans Mono", Consolas, "Lucida Console", monospace\'</span>,\n    fontFamily: <span class="token string">\'Menlo\'</span>,\n\n    // default font weight: <span class="token string">\'normal\'</span> or <span class="token string">\'bold\'</span>\n    fontWeight: <span class="token string">\'normal\'</span>,\n\n    // font weight <span class="token keyword">for</span> bold characters: <span class="token string">\'normal\'</span> or <span class="token string">\'bold\'</span>\n    fontWeightBold: <span class="token string">\'bold\'</span>,\n\n    // terminal cursor background color and opacity <span class="token punctuation">(</span>hex, rgb, hsl, hsv, hwb or cmyk<span class="token punctuation">)</span>\n    cursorColor: <span class="token string">\'rgba(248,28,229,0.8)\'</span>,\n\n    // terminal text color under BLOCK cursor\n    cursorAccentColor: <span class="token string">\'#000\'</span>,\n\n    // <span class="token variable"><span class="token variable">`</span><span class="token string">\'BEAM\'</span><span class="token variable">`</span></span> <span class="token keyword">for</span> <span class="token operator">|</span>, <span class="token variable"><span class="token variable">`</span><span class="token string">\'UNDERLINE\'</span><span class="token variable">`</span></span> <span class="token keyword">for</span> _, <span class="token variable"><span class="token variable">`</span><span class="token string">\'BLOCK\'</span><span class="token variable">`</span></span> <span class="token keyword">for</span> â–ˆ\n    cursorShape: <span class="token string">\'BLOCK\'</span>,\n\n    // <span class="token keyword">set</span> to <span class="token variable"><span class="token variable">`</span><span class="token boolean">true</span><span class="token variable">`</span></span> <span class="token punctuation">(</span>without backticks and without quotes<span class="token punctuation">)</span> <span class="token keyword">for</span> blinking cursor\n    cursorBlink: true,\n\n    // color of the text\n    foregroundColor: <span class="token string">\'#fff\'</span>,\n\n    // terminal background color\n    // opacity is only supported on macOS\n    backgroundColor: <span class="token string">\'#000\'</span>,\n\n    // terminal selection color\n    selectionColor: <span class="token string">\'rgba(248,28,229,0.3)\'</span>,\n\n    // border color <span class="token punctuation">(</span>window, tabs<span class="token punctuation">)</span>\n    borderColor: <span class="token string">\'#333\'</span>,\n\n    // custom CSS to embed <span class="token keyword">in</span> the main window\n    css: <span class="token string">\'\'</span>,\n\n    // custom CSS to embed <span class="token keyword">in</span> the terminal window\n    termCSS: <span class="token string">\'\'</span>,\n\n    // <span class="token keyword">if</span> you<span class="token string">\'re using a Linux setup which show native menus, set to false\n    // default: <span class="token variable"><span class="token variable">`</span><span class="token boolean">true</span><span class="token variable">`</span></span> on Linux, <span class="token variable"><span class="token variable">`</span><span class="token boolean">true</span><span class="token variable">`</span></span> on Windows, ignored on macOS\n    showHamburgerMenu: \'</span><span class="token string">\',\n\n    // set to <span class="token variable"><span class="token variable">`</span><span class="token boolean">false</span><span class="token variable">`</span></span> (without backticks and without quotes) if you want to hide the minimize, maximize and close buttons\n    // additionally, set to <span class="token variable"><span class="token variable">`</span><span class="token string">\'left\'</span><span class="token variable">`</span></span> if you want them on the left, like in Ubuntu\n    // default: <span class="token variable"><span class="token variable">`</span><span class="token boolean">true</span><span class="token variable">`</span></span> (without backticks and without quotes) on Windows and Linux, ignored on macOS\n    showWindowControls: \'</span><span class="token string">\',\n\n    // custom padding (CSS format, i.e.: <span class="token variable"><span class="token variable">`</span><span class="token function">top</span> right bottom left<span class="token variable">`</span></span>)\n    padding: \'</span>12px 14px<span class="token string">\',\n\n    // the full list. if you\'</span>re going to provide the full color palette,\n    // including the 6 x 6 color cubes and the grayscale map, just provide\n    // an array here instead of a color map object\n    colors: <span class="token punctuation">{</span>\n      black: <span class="token string">\'#000000\'</span>,\n      red: <span class="token string">\'#C51E14\'</span>,\n      green: <span class="token string">\'#1DC121\'</span>,\n      yellow: <span class="token string">\'#C7C329\'</span>,\n      blue: <span class="token string">\'#0A2FC4\'</span>,\n      magenta: <span class="token string">\'#C839C5\'</span>,\n      cyan: <span class="token string">\'#20C5C6\'</span>,\n      white: <span class="token string">\'#C7C7C7\'</span>,\n      lightBlack: <span class="token string">\'#686868\'</span>,\n      lightRed: <span class="token string">\'#FD6F6B\'</span>,\n      lightGreen: <span class="token string">\'#67F86F\'</span>,\n      lightYellow: <span class="token string">\'#FFFA72\'</span>,\n      lightBlue: <span class="token string">\'#6A76FB\'</span>,\n      lightMagenta: <span class="token string">\'#FD7CFC\'</span>,\n      lightCyan: <span class="token string">\'#68FDFE\'</span>,\n      lightWhite: <span class="token string">\'#FFFFFF\'</span>,\n    <span class="token punctuation">}</span>,\n\n    // the shell to run when spawning a new session <span class="token punctuation">(</span>i.e. /usr/local/bin/fish<span class="token punctuation">)</span>\n    // <span class="token keyword">if</span> left empty, your system<span class="token string">\'s login shell will be used by default\n    //\n    // Windows\n    // - Make sure to use a full path if the binary name doesn\'</span>t work\n    // - Remove <span class="token variable"><span class="token variable">`</span>--login<span class="token variable">`</span></span> <span class="token keyword">in</span> shellArgs\n    //\n    // Bash on Windows\n    // - Example: <span class="token variable"><span class="token variable">`</span>C:\\\\Windows\\\\System32\\\\bash.exe<span class="token variable">`</span></span>\n    //\n    // PowerShell on Windows\n    // - Example: <span class="token variable"><span class="token variable">`</span>C:\\\\WINDOWS\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe<span class="token variable">`</span></span>\n    shell: <span class="token string">\'\'</span>,\n\n    // <span class="token keyword">for</span> setting shell arguments <span class="token punctuation">(</span>i.e. <span class="token keyword">for</span> using interactive shellArgs: <span class="token variable"><span class="token variable">`</span><span class="token punctuation">[</span><span class="token string">\'-i\'</span><span class="token punctuation">]</span><span class="token variable">`</span></span><span class="token punctuation">)</span>\n    // by default <span class="token variable"><span class="token variable">`</span><span class="token punctuation">[</span><span class="token string">\'--login\'</span><span class="token punctuation">]</span><span class="token variable">`</span></span> will be used\n    shellArgs: <span class="token punctuation">[</span><span class="token string">\'--login\'</span><span class="token punctuation">]</span>,\n\n    // <span class="token keyword">for</span> environment variables\n    env: <span class="token punctuation">{</span><span class="token punctuation">}</span>,\n\n    // <span class="token keyword">set</span> to <span class="token variable"><span class="token variable">`</span><span class="token boolean">false</span><span class="token variable">`</span></span> <span class="token keyword">for</span> no bell\n    bell: false,\n\n    // <span class="token keyword">if</span> <span class="token variable"><span class="token variable">`</span><span class="token boolean">true</span><span class="token variable">`</span></span> <span class="token punctuation">(</span>without backticks and without quotes<span class="token punctuation">)</span>, selected text will automatically be copied to the clipboard\n    copyOnSelect: false,\n\n    // <span class="token keyword">if</span> <span class="token variable"><span class="token variable">`</span><span class="token boolean">true</span><span class="token variable">`</span></span> <span class="token punctuation">(</span>without backticks and without quotes<span class="token punctuation">)</span>, hyper will be <span class="token keyword">set</span> as the default protocol client <span class="token keyword">for</span> SSH\n    defaultSSHApp: true,\n\n    // <span class="token keyword">if</span> <span class="token variable"><span class="token variable">`</span><span class="token boolean">true</span><span class="token variable">`</span></span> <span class="token punctuation">(</span>without backticks and without quotes<span class="token punctuation">)</span>, on right click selected text will be copied or pasted <span class="token keyword">if</span> no\n    // selection is present <span class="token punctuation">(</span><span class="token variable"><span class="token variable">`</span><span class="token boolean">true</span><span class="token variable">`</span></span> by default on Windows and disables the context menu feature<span class="token punctuation">)</span>\n    // quickEdit: true,\n\n    // URL to custom bell\n    // bellSoundURL: <span class="token string">\'http://example.com/bell.mp3\'</span>,\n\n    // <span class="token keyword">for</span> advanced config flags please refer to https://hyper.is/<span class="token comment">#cfg</span>\n  <span class="token punctuation">}</span>,\n\n  // a list of plugins to fetch and <span class="token function">install</span> from <span class="token function">npm</span>\n  // format: <span class="token punctuation">[</span>@org/<span class="token punctuation">]</span>project<span class="token punctuation">[</span><span class="token comment">#version]</span>\n  // examples:\n  //   <span class="token variable"><span class="token variable">`</span>hyperpower<span class="token variable">`</span></span>\n  //   <span class="token variable"><span class="token variable">`</span>@company/project<span class="token variable">`</span></span>\n  //   <span class="token variable"><span class="token variable">`</span>project#1.0.1<span class="token variable">`</span></span>\n  plugins: <span class="token punctuation">[</span><span class="token string">\'hyper-material-theme\'</span>, <span class="token string">\'verminal\'</span>, <span class="token string">\'hyper-pane\'</span>, <span class="token string">\'hyperocean\'</span><span class="token punctuation">]</span>,\n\n  // <span class="token keyword">in</span> development, you can create a directory under\n  // <span class="token variable"><span class="token variable">`</span>~/.hyper_plugins/local/<span class="token variable">`</span></span> and include it here\n  // to load it and avoid it being <span class="token variable"><span class="token variable">`</span><span class="token function">npm</span> <span class="token function">install</span><span class="token variable">`</span></span>ed\n  localPlugins: <span class="token punctuation">[</span><span class="token punctuation">]</span>,\n\n  keymaps: <span class="token punctuation">{</span>\n    // Example\n    // <span class="token string">\'window:devtools\'</span><span class="token keyword">:</span> <span class="token string">\'cmd+alt+o\'</span>,\n    <span class="token string">\'pane:prev\'</span><span class="token keyword">:</span> <span class="token string">\'command+up\'</span>,\n    <span class="token string">\'pane:next\'</span><span class="token keyword">:</span> <span class="token string">\'command+down\'</span>,\n  <span class="token punctuation">}</span>,\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n      </div>',frontmatter:{date:"August 21, 2018",path:"/hyperjs-config",title:"HyperJS config"}}},pathContext:{}}}});
//# sourceMappingURL=path---hyperjs-config-375c4190b474177b2f99.js.map